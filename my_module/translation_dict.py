import numpy as np
from save_load_pickle import *
SB2_TO_SB3_OP_MAP = {
    'forward:': 'motion_movesteps',
    'turnRight:': 'motion_turnright',
    'turnLeft:': 'motion_turnleft',
    'heading:': 'motion_pointindirection',
    'pointTowards:': 'motion_pointtowards',
    'gotoX:y:': 'motion_gotoxy',
    'gotoSpriteOrMouse:': 'motion_goto',
    'glideSecs:toX:y:elapsed:from:': 'motion_glidesecstoxy',
    'changeXposBy:': 'motion_changexby',
    'xpos:': 'motion_setx',
    'changeYposBy:': 'motion_changeyby',
    'ypos:': 'motion_sety',
    'bounceOffEdge': 'motion_ifonedgebounce',
    'setRotationStyle': 'motion_setrotationstyle',
    'xpos': 'motion_xposition',
    'ypos': 'motion_yposition',
    'heading': 'motion_direction',
    'scrollRight': 'motion_scroll_right',
    'scrollUp': 'motion_scroll_up',
    'scrollAlign': 'motion_align_scene',
    'xScroll': 'motion_xscroll',
    'yScroll': 'motion_yscroll',
    'say:duration:elapsed:from:': 'looks_sayforsecs',
    'say:': 'looks_say',
    'think:duration:elapsed:from:': 'looks_thinkforsecs',
    'think:': 'looks_think',
    'show': 'looks_show',
    'hide': 'looks_hide',
    'hideAll': 'looks_hideallsprites',
    'lookLike:': 'looks_switchcostumeto',
    'nextCostume': 'looks_nextcostume',
    'startScene': 'looks_switchbackdropto',
    'changeGraphicEffect:by:': 'looks_changeeffectby',
    'setGraphicEffect:to:': 'looks_seteffectto',
    'filterReset': 'looks_cleargraphiceffects',
    'changeSizeBy:': 'looks_changesizeby',
    'setSizeTo:': 'looks_setsizeto',
    'changeStretchBy:': 'looks_changestretchby',
    'setStretchTo:': 'looks_setstretchto',
    'comeToFront': 'looks_gotofrontback',
    'goBackByLayers:': 'looks_goforwardbackwardlayers',
    'costumeIndex': 'looks_costumenumbername',
    'costumeName': 'looks_costumenumbername',
    'sceneName': 'looks_backdropnumbername',
    'scale': 'looks_size',
    'startSceneAndWait': 'looks_switchbackdroptoandwait',
    'nextScene': 'looks_nextbackdrop',
    'backgroundIndex': 'looks_backdropnumbername',
    'playSound:': 'sound_play',
    'doPlaySoundAndWait': 'sound_playuntildone',
    'stopAllSounds': 'sound_stopallsounds',
    'playDrum': 'music_playDrumForBeats',
    'noteOn:duration:elapsed:from:': 'music_playNoteForBeats',
    'rest:elapsed:from:': 'music_restForBeats',
    'instrument:': 'music_setInstrument',
    'drum:duration:elapsed:from:': 'music_midiPlayDrumForBeats',
    'midiInstrument:': 'music_midiSetInstrument',
    'changeVolumeBy:': 'sound_changevolumeby',
    'setVolumeTo:': 'sound_setvolumeto',
    'volume': 'sound_volume',
    'changeTempoBy:': 'music_changeTempo',
    'setTempoTo:': 'music_setTempo',
    'tempo': 'music_getTempo',
    'clearPenTrails': 'pen_clear',
    'stampCostume': 'pen_stamp',
    'putPenDown': 'pen_penDown',
    'putPenUp': 'pen_penUp',
    'penColor:': 'pen_setPenColorToColor',
    'changePenHueBy:': 'pen_changePenHueBy',
    'setPenHueTo:': 'pen_setPenHueToNumber',
    'changePenShadeBy:': 'pen_changePenShadeBy',
    'setPenShadeTo:': 'pen_setPenShadeToNumber',
    'changePenSizeBy:': 'pen_changePenSizeBy',
    'penSize:': 'pen_setPenSizeTo',
    'whenGreenFlag': 'event_whenflagclicked',
    'whenKeyPressed': 'event_whenkeypressed',
    'whenClicked': 'event_whenthisspriteclicked',
    'whenSceneStarts': 'event_whenbackdropswitchesto',
    'whenIReceive': 'event_whenbroadcastreceived',
    'broadcast:': 'event_broadcast',
    'doBroadcastAndWait': 'event_broadcastandwait',
    'wait:elapsed:from:': 'control_wait',
    'doRepeat': 'control_repeat',
    'doForever': 'control_forever',
    'doIf': 'control_if',
    'doIfElse': 'control_if_else',
    'doWaitUntil': 'control_wait_until',
    'doUntil': 'control_repeat_until',
    'doWhile': 'control_while',
    'doForLoop': 'control_for_each',
    'stopScripts': 'control_stop',
    'whenCloned': 'control_start_as_clone',
    'createCloneOf': 'control_create_clone_of',
    'deleteClone': 'control_delete_this_clone',
    'COUNT': 'control_get_counter',
    'INCR_COUNT': 'control_incr_counter',
    'CLR_COUNT': 'control_clear_counter',
    'warpSpeed': 'control_all_at_once',
    'touching:': 'sensing_touchingobject',
    'touchingColor:': 'sensing_touchingcolor',
    'color:sees:': 'sensing_coloristouchingcolor',
    'distanceTo:': 'sensing_distanceto',
    'doAsk': 'sensing_askandwait',
    'answer': 'sensing_answer',
    'keyPressed:': 'sensing_keypressed',
    'mousePressed': 'sensing_mousedown',
    'mouseX': 'sensing_mousex',
    'mouseY': 'sensing_mousey',
    'soundLevel': 'sensing_loudness',
    'isLoud': 'sensing_loud',
    'senseVideoMotion': 'videoSensing_videoOn',
    'setVideoState': 'videoSensing_videoToggle',
    'setVideoTransparency': 'videoSensing_setVideoTransparency',
    'timer': 'sensing_timer',
    'timerReset': 'sensing_resettimer',
    'getAttribute:of:': 'sensing_of',
    'timeAndDate': 'sensing_current',
    'timestamp': 'sensing_dayssince2000',
    'getUserName': 'sensing_username',
    'getUserId': 'sensing_userid',
    '+': 'operator_add',
    '-': 'operator_subtract',
    '*': 'operator_multiply',
    '/': 'operator_divide',
    'randomFrom:to:': 'operator_random',
    '<': 'operator_lt',
    '=': 'operator_equals',
    '>': 'operator_gt',
    '&': 'operator_and',
    '|': 'operator_or',
    'not': 'operator_not',
    'concatenate:with:': 'operator_join',
    'letter:of:': 'operator_letter_of',
    'stringLength:': 'operator_length',
    '%': 'operator_mod',
    'rounded': 'operator_round',
    'computeFunction:of:': 'operator_mathop',
    'readVariable': 'data_variable',
    'getVar:': 'data_variable',
    'setVar:to:': 'data_setvariableto',
    'changeVar:by:': 'data_changevariableby',
    'showVariable:': 'data_showvariable',
    'hideVariable:': 'data_hidevariable',
    'contentsOfList:': 'data_listcontents',
    'append:toList:': 'data_addtolist',
    'deleteLine:ofList:': 'data_deleteoflist',
    'insert:at:ofList:': 'data_insertatlist',
    'setLine:ofList:to:': 'data_replaceitemoflist',
    'getLine:ofList:': 'data_itemoflist',
    'lineCountOfList:': 'data_lengthoflist',
    'list:contains:': 'data_listcontainsitem',
    'showList:': 'data_showlist',
    'hideList:': 'data_hidelist',
    'procDef': 'procedures_definition',
    'getParam': 'argument_reporter_string_number',
    'call': 'procedures_call',
}

# This is the translation from Snap to Scratch.
# translation_dict = {'bubble':  'think:',
#  'clear': 'clearPenTrails',
#  'customBlock': 'con',
#  'doAsk': 'doAsk',
#  'doBroadcast': 'broadcast:',
#  'doBroadcastAndWait':  'doBroadcastAndWait',
#  'doCallCC': 'con',
#  'doChangeVar':  'changeVar:by:',
#  'doDeclareVariables': 'con',
#  'doForever':  'doForever',
#  'doHideVar': 'hideVariable:',
#  'doIf': 'doIf',
#  'doIfElse':  'doIfElse',
#  'doRepeat': 'doRepeat',
#  'doRun': 'UNK',
#  'doSayFor': 'say:duration:elapsed:from:',
#  'doSetVar': 'setVar:to:',
#  'doShowVar':'showVariable:',
#  'doStopThis': 'stopScripts',
#  'doThinkFor': 'think:duration:elapsed:from:',
#  'doUntil': 'doUntil',
#  'doWaitUntil': 'doWaitUntil',
#  'doWarp': 'UNK',
#  'down': 'putPenDown',
#  'evaluateCustomBlock': 'call',
#  'forward': 'forward:',
#  'getLastAnswer': 'answer',
#  'list': 'con',
#  'literal': 'lit',
#  'receiveCondition': 'whenIReceive',
#  'receiveGo': 'whenGreenFlag',
#  'receiveInteraction':  'whenClicked',
#  'receiveKey': 'whenKeyPressed',
#  'receiveMessage': 'whenIReceive',
#  'reifyScript': 'UNK',
#  'reportAnd': '&',
#  'reportEquals': '=',
#  'reportFalse': 'TF',
#  'reportGreaterThan': '>',
#  'reportIsIdentical': '=',
#  'reportJoinWords': 'concatenate:with:',
#  'reportLessThan': '<',
#  'reportNot': 'not',
#  'reportProduct': '*',
#  'reportRandom': 'randomFrom:to:',
#  'reportSum': '+',
#  'reportTextSplit': 'UNK',
#  'reportTrue': 'TF',
#  'script': 'UNK',
#  'sprite': 'UNK',
#  'stage': 'UNK',
#  'turn': 'turnRight:',
#  'turnLeft': 'turnLeft:',
#  'up': 'putPenUp',
#  'var': 'readVariable',
#  'varDec': 'con',
#  'varMenu': 'con',
#  'changeHue': 'changePenHueBy:',
#  'changeScale': 'changeSizeBy:',
#  'changeSize': 'changePenSizeBy:',
#  'changeXPosition': 'changeXposBy:',
#  'clearEffects': 'filterReset',
#  'doGlide': 'glideSecs:toX:y:elapsed:from:',
#  'doReport': 'UNK',
#  'doWait': 'doWaitUntil',
#  'for_*_to__': 'UNK',
#  'gotoXY': 'gotoX:y:',
#  'reportDifference': '-',
#  'reportOr': '|',
#  'reportQuotient': '\\/',
#  'setColor': 'penColor:',
#  'setHeading': 'heading:',
#  'setHue': 'setPenHueTo:',
#  'setScale': 'setSizeTo:',
#  'setSize': 'penSize:',
#  'setXPosition': 'xpos:',
#  'setYPosition': 'ypos:',
#  'snapshot': 'UNK',
#  'reportIsA': 'readVariable',
#  'reportModulus': '%',
#  'reportNewList': 'contentsOfList:',
#  'doAddToList': 'append:toList:',
#  'doDeleteFromList': 'deleteLine:ofList:',
#  'doInsertInList': 'insert:at:ofList:',
#  'reportListContainsItem': 'list:contains:',
#  'reportListItem': 'getLine:ofList:',
#  'reportListLength': 'lineCountOfList:'}

embedding_dir = base_dir + "/Embeddings/"
word2idx, idx2word = tuple(np.load(embedding_dir + "dict.npy", allow_pickle=True))

data_dir = base_dir + "/xy_0heldout/scratch_code_state[[1, 0]]"
pattern_data = load_obj('full_patterns', data_dir)

idx2sb3 = {}
for ind in idx2word:
    try:
        new_sb3_word = SB2_TO_SB3_OP_MAP[idx2word[ind]]
        idx2sb3[ind] = new_sb3_word
    except:
        pass
# print(idx2sb3)
# print(len(idx2sb3))


sb32idx =  {value: key for key, value in idx2sb3.items()}



